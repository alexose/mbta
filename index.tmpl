<!DOCTYPE html>
<meta charset="utf-8">
<html>
<head>
  <!-- bower:css -->
  <!-- endbower -->
</head>
<body>
  <h1>MBTAVIZOMG</h1>
  <svg width="600" height="400" viewBox="0 0 100 100"></svg>
  <!-- bower:js -->
  <script src="client/bower_components/d3/d3.js"></script>
  <script src="client/bower_components/lodash/lodash.js"></script>
  <!-- endbower -->
  <script>
var data = {{data}};

var svg = d3.selectAll('svg');

// Map colors
var colors = {
  'Green Line':       'green',
  'Red Line':         'red',
  'Orange Line':      'orange',
  'Blue Line':        'blue',
  'Mattapan Trolley': 'red'
};

function makeExtent(){
  var arr = _.chain(data.stops)
    .pluck(coords)
    .value();

  var x = _.chain(arr).pluck(0).value(),
    y = _.chain(arr).pluck(1).value();

  // TODO: aspect ratio
  var obj = [
      [_.min(x), _.max(x)],
      [_.min(y), _.max(y)]
    ];

  if (coords == 'geo'){
    obj[1].reverse();
  }

  return obj;
};

function makeScale(){
  return {
    x : d3.scale.linear().domain(extent[0]).range([0, 100]),
    y : d3.scale.linear().domain(extent[1]).range([0, 100])
  }
}

function getX(stop){
  var coord = stop[coords] ? stop[coords][0] : 0;
  return scale.x(coord);
}

function getY(stop){
  var coord = stop[coords] ? stop[coords][1] : 0;
  return scale.y(coord);
}

function mouseover(stop){
  console.log(stop.parent_station_name, stop);
}

var coords, extent, scale, initialized;

init();
function init(){
  coords = coords === 'spider' ? 'geo' : 'spider';
  extent = makeExtent();
  scale = makeScale();

  // Processs coordinates
  var stops = _.values(data.stops),
    segments = data.segments;

  stops.forEach(function(d){
    d.x = scale.x(d[coords][0]);
    d.y = scale.y(d[coords][1]);
  });

  segments.forEach(function(d){
    var start = data.stops[d.start],
      end = data.stops[d.end];

    d.x1 = start.x;
    d.y1 = start.y;
    d.x2 = end.x;
    d.y2 = end.y;

    d.color = colors[start.route_name];
  });

  if (initialized){
    update(stops, segments);
  } else {
    draw(stops, segments);
  }
  initialized = true;
}


function draw(stops, segments){

  var circles = svg.selectAll('circle'),
      lines = svg.selectAll('line');

  circles
    .data(stops)
    .enter()
      .append('circle')
        .on('mouseover', mouseover)
        .style('fill', function(d){ return colors[d.route_name]; });

  lines
    .data(segments)
    .enter()
      .append('line')
        .style('stroke', function(d){ return d.color; });

   update(stops, segments, 0);
}

function update(stops, segments, time){

  time = time || 1000;

  var circles = svg.selectAll('circle'),
      lines = svg.selectAll('line');

  circles
    .transition().duration(time)
      .attr('cy', function(d){ return d.y })
      .attr('cx', function(d){ return d.x })
      .attr('r', 1);

  lines
    .transition().duration(time)
      .attr('y1', function(d){ return d.y1; })
      .attr('x1', function(d){ return d.x1; })
      .attr('y2', function(d){ return d.y2; })
      .attr('x2', function(d){ return d.x2; });
}

// Set up web socket
var ws = new WebSocket('{{socket}}');

ws.onopen = function(){
  console.log('Socket opened.');
};

ws.onemessage = function(message){
  console.log(message);
};

  </script>
</body>
</html>
